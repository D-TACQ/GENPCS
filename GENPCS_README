@mainpage
README for GENPCS : Generalised PCS IO model: 1..4 UUT's, split ACQ and MODel
# There are 3 runtime configs:
acq : acq hardware test, NO MODel "ACQ"
mod : model test, NO hardware, with MODel "MOD"
pcs : acq+mod, the final product, with ACQ and MODel  "ACQ+MOD"
nul : no hardware, no model : tests the model compile

Original MODel was C-code generated by SIMULINK, but any C program will do.

# There are 3 configurations
sngl : single box
dual : dual box
multi : 1..4 boxes, specify from command line.

# total 9 executables
acq-sngl, acq-dual, acq_multi
mod-sngl, mod-dual, mod_multi	# in practise, maybe there's only ONE mod
pcs-sngl, pcs-dual, pcs_multi

# ACQ is only available when ACQ box is present, otherwise use ACQ_stub
# the MODEL is only available on a machine with a valid Simulink license,
# otherwise use GENPCS_stub
#

# KEY for the MODEL: has NO KNOWLEDGE of the distribution of UUTS
# - the MODEL is presented with a single input vector GENPCS_U of inputs.
# - the MODEL output is GENPCS_Y, a single vector
#
# the acqproc harness is responsible for 
# GATHERING the various UUT inputs VI to present to the model
# SCATTERING the output from the model to the various UUT outputs VO.

# We also propose two boxes. There's a single box test and a dual box test
# For simplicity, both boxes are considered identical, with
# 128AI, 32AO, 32DIO
# Physically, the boxes may have
# Box 1 : 128AI, 32 DIO
# Box 2 :  64AI, 32 AO, 32DIO
# However, if they both fake the missing functions, then the boxes are 
# interchangeable, and we only need two types of test
# sngl : SiNGLe box
# dual : DUAL box
# Ideally, each box has some AI and some AO, then we can run a "real" external 
# test using a scope. 

# A single module linux_rt.c takes care of the real time issues and common 
# "User Interface".
# A single module acq_shim.c takes care of interfacing to the acq.

mod: presents this interface:
GENPCS_U;			# MODEL INPUTS: vector of AI, DI : shorts
GENPCS_Y;			# MODEL OUTPUTS: vector of AO, DO : shorts
GENPCS_initialize();		# start the model
GENPCS_step();			# step the model
GENPCS_terminate();		

acq: presents this interface:
acq_init()			
acq_IO()			# capture a sample
acq_terminate()

linux_rt presents this interface:
linux_rt_init() 
